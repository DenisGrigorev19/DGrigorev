from http.server import BaseHTTPRequestHandler,HTTPServer
import os
import getpass
import shutil

hostName = "localhost"
hostPort = 80
access = "C:/Codemasters"

def _access_check(checkdir):
    #if checkdir[0:len(access)] == access: 
    return True
    #else: return False

class HttpProcessor(BaseHTTPRequestHandler):
    def _set_response(self):
            self.send_response(200)
            self.send_header('content-type','text/html')
            self.end_headers()
            
    def do_GET(self):
            directory = format(self.path)[1:]
            self._set_response()
            if (_access_check(directory) or _access_check(directory[2:])) and directory != 'favicon.ico': 
                if directory[0:2] == "r/":
                
                    try:
                        os.remove(directory[2:])
                        self.wfile.write("File '{}' removed".format(directory[2:]).encode())
                    
                    except OSError:
                        if os.listdir(directory[2:]) == []:
                            os.rmdir(directory[2:])
                            self.wfile.write("Folder '{}' removed".format(directory[2:]).encode())
                        else: self.wfile.write("Folder '{}' isn't empty".format(directory[2:]).encode())
                
                elif directory[0:2] == "d/":
                    file_name = ''
                    directory = directory[2:]
                    for ch in directory:
                        if ch == '/': break
                        file_name += ch 
                    url = directory[len(file_name) + 1:] + '/' + file_name
                    shutil.copy(url, 'C:/users/' + getpass.getuser() + '/downloads/', follow_symlinks=True)
                    
                    
                else:
                    files = os.listdir(directory)
                    stroka = ''
                    for ele in files:
                        stroka += ele + '<br/>'
                    self.wfile.write(('<meta charset="UTF-8"/>' + stroka).encode())
            else: self.wfile.write(('Access denyed').encode())

serv = HTTPServer((hostName,hostPort),HttpProcessor)
serv.serve_forever()
